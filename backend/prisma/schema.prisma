generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:C:\\Users\\user\\.blockmine\\blockmine.db"
}

model Server {
  id      Int    @id @default(autoincrement())
  name    String @unique
  host    String
  port    Int    @default(25565)
  version String
  bots    Bot[]
}

model Bot {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  password         String?
  prefix           String?           @default("@")
  note             String?
  serverId         Int
  proxyHost        String?
  proxyPort        Int?
  proxyUsername    String?
  proxyPassword    String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  owners           String?           @default("")
  server           Server            @relation(fields: [serverId], references: [id])
  commands         Command[]
  eventGraphs      EventGraph[]
  groups           Group[]
  installedPlugins InstalledPlugin[]
  permissions      Permission[]
  pluginData       PluginDataStore[]
  users            User[]
}

model InstalledPlugin {
  id          Int      @id @default(autoincrement())
  botId       Int
  name        String
  version     String
  description String?
  sourceType  String
  sourceUri   String?
  path        String
  isEnabled   Boolean  @default(true)
  manifest    String?
  settings    String?  @default("{}")
  createdAt   DateTime @default(now())
  bot         Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, name])
}

model Command {
  id               Int         @id @default(autoincrement())
  botId            Int
  name             String
  isEnabled        Boolean     @default(true)
  cooldown         Int         @default(0)
  aliases          String      @default("[]")
  description      String?
  owner            String?
  permissionId     Int?
  allowedChatTypes String      @default("[\"chat\", \"private\"]")
  isVisual         Boolean     @default(false)
  argumentsJson    String?     @default("[]")
  graphJson        String?     @default("null")
  permission       Permission? @relation(fields: [permissionId], references: [id])
  bot              Bot         @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, name])
}

model EventGraph {
  id        Int            @id @default(autoincrement())
  botId     Int
  name      String
  isEnabled Boolean        @default(true)
  graphJson String?        @default("null")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  variables String?        @default("[]")
  bot       Bot            @relation(fields: [botId], references: [id], onDelete: Cascade)
  triggers  EventTrigger[]

  @@unique([botId, name])
}

model EventTrigger {
  id        Int        @id @default(autoincrement())
  graphId   Int
  eventType String
  graph     EventGraph @relation(fields: [graphId], references: [id], onDelete: Cascade)

  @@unique([graphId, eventType])
}

model User {
  id            Int         @id @default(autoincrement())
  username      String
  isBlacklisted Boolean     @default(false)
  botId         Int
  bot           Bot         @relation(fields: [botId], references: [id], onDelete: Cascade)
  groups        UserGroup[]

  @@unique([botId, username])
}

model Group {
  id          Int               @id @default(autoincrement())
  name        String
  owner       String            @default("system")
  botId       Int
  bot         Bot               @relation(fields: [botId], references: [id], onDelete: Cascade)
  permissions GroupPermission[]
  users       UserGroup[]

  @@unique([botId, name])
}

model Permission {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  owner       String            @default("system")
  botId       Int
  commands    Command[]
  groups      GroupPermission[]
  bot         Bot               @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, name])
}

model UserGroup {
  userId  Int
  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model GroupPermission {
  groupId      Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([groupId, permissionId])
}

model ScheduledTask {
  id           Int       @id @default(autoincrement())
  name         String
  cronPattern  String?
  action       String
  targetBotIds String
  payload      String?   @default("{}")
  isEnabled    Boolean   @default(true)
  runOnStartup Boolean   @default(false)
  lastRun      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model PanelUser {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  username     String    @unique
  passwordHash String
  roleId       Int
  createdAt    DateTime  @default(now())
  role         PanelRole @relation(fields: [roleId], references: [id])
}

model PanelRole {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  permissions String      @default("[]")
  users       PanelUser[]
}

model PluginDataStore {
  id         Int      @id @default(autoincrement())
  pluginName String
  botId      Int
  key        String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bot        Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([pluginName, botId, key])
}
