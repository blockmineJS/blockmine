/**
 * @typedef {object} NodePin
 * @property {string} id - Unique pin identifier (e.g., "exec", "data_result").
 * @property {string} name - Human-readable pin name.
 * @property {string} type - Pin data type ("Exec", "String", "Boolean", etc.).
 * @property {boolean} [required] - Whether this pin is required.
 */

/**
 * @typedef {object} NodeConfig
 * @property {string} type - Unique node type identifier (e.g., "action:send_message").
 * @property {string} label - Human-readable node name.
 * @property {string} category - Category for UI grouping.
 * @property {string} description - Node description.
 * @property {NodePin[]} inputs - Array of input pin descriptions.
 * @property {NodePin[]} outputs - Array of output pin descriptions.
 * @property {Function} [executor] - Function to execute this node (for backend).
 */

/**
 * Registry for managing all available node types.
 */
class NodeRegistry {
  constructor() {
    this.nodes = new Map();
    this._registerBaseNodes();
  }

  /**
   * Registers a new node type.
   * @param {NodeConfig} nodeConfig - Node configuration.
   */
  registerNodeType(nodeConfig) {
    if (!nodeConfig.type) {
      throw new Error('Node type is required');
    }
    
    if (this.nodes.has(nodeConfig.type)) {
      console.warn(`Node type '${nodeConfig.type}' is already registered. Overriding.`);
    }

    this.nodes.set(nodeConfig.type, nodeConfig);
    console.log(`Registered node type: ${nodeConfig.type}`);
  }

  /**
   * Gets a node configuration by type.
   * @param {string} nodeType - Node type identifier.
   * @returns {NodeConfig|undefined}
   */
  getNodeConfig(nodeType) {
    return this.nodes.get(nodeType);
  }

  /**
   * Gets all registered node types.
   * @returns {NodeConfig[]}
   */
  getAllNodes() {
    return Array.from(this.nodes.values());
  }

  /**
   * Gets nodes grouped by category.
   * @param {string} [graphType] - The type of graph ('command' or 'event') to filter nodes for.
   * @returns {Object.<string, NodeConfig[]>}
   */
  getNodesByCategory(graphType) {
    const categories = {};
    for (const node of this.nodes.values()) {
      if (graphType === 'command') {
        if (node.category === '–°–æ–±—ã—Ç–∏—è' && node.type !== 'event:command') {
          continue;
        }
      } else if (graphType === 'event') {
        if (node.type === 'event:command' || node.type === 'event:current_user') {
          continue;
        }
      }
      
      if (!categories[node.category]) {
        categories[node.category] = [];
      }
      categories[node.category].push(node);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for (const categoryName in categories) {
      if (categories[categoryName].length === 0) {
        delete categories[categoryName];
      }
    }

    return categories;
  }

  /**
   * Validates if a node type exists.
   * @param {string} nodeType - Node type identifier.
   * @returns {boolean}
   */
  hasNodeType(nodeType) {
    return this.nodes.has(nodeType);
  }

  /**
   * Registers the base node library.
   * @private
   */
  _registerBaseNodes() {
    // –°–æ–±—ã—Ç–∏—è
    this.registerNodeType({
      type: 'event:command',
      label: '‚ñ∂Ô∏è –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∞ –∫–æ–º–∞–Ω–¥—ã.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
          { id: 'args', name: '–ê—Ä–≥—É–º–µ–Ω—Ç—ã', type: 'Object' },
          { id: 'chat_type', name: '–¢–∏–ø —á–∞—Ç–∞', type: 'String' }
        ]
      }
    });

    this.registerNodeType({
      type: 'event:chat',
        name: '–°–æ–±—ã—Ç–∏–µ: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
        label: 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
        description: '–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤ —á–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        category: '–°–æ–±—ã—Ç–∏—è',
        isEvent: true,
        pins: {
            inputs: [],
            outputs: [
                { id: 'exec', type: 'Exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å' },
                { id: 'username', type: 'String', name: '–ò–≥—Ä–æ–∫' },
                { id: 'message', type: 'String', name: '–°–æ–æ–±—â–µ–Ω–∏–µ' },
                { id: 'chatType', type: 'String', name: '–¢–∏–ø —á–∞—Ç–∞' },
                { id: 'raw', type: 'String', name: 'Raw JSON' },
            ]
        }
    });

    this.registerNodeType({
      type: 'event:playerJoined',
      label: 'üëã –ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
        ]
      }
    });

    this.registerNodeType({
      type: 'event:playerLeft',
      label: 'üö™ –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
        ]
      }
    });

    this.registerNodeType({
      type: 'event:entitySpawn',
      label: 'üì¶ –°—É—â–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏–ª–∞—Å—å',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è –±–æ—Ç–∞.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object' }
        ]
      }
    });

    this.registerNodeType({
      type: 'event:entityMoved',
      label: 'üßç –°—É—â–Ω–æ—Å—Ç—å –ø–æ–¥–≤–∏–Ω—É–ª–∞—Å—å',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ª—é–±–∞—è —Å—É—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object' }
        ]
      }
    });
    
    this.registerNodeType({
      type: 'event:entityGone',
      label: '‚ùå –°—É—â–Ω–æ—Å—Ç—å –∏—Å—á–µ–∑–ª–∞',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å—É—â–Ω–æ—Å—Ç—å –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–æ—Ç–∞.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object' }
        ]
      }
    });

    this.registerNodeType({
      type: 'flow:branch',
      label: '‚ÜîÔ∏è –í–µ—Ç–≤–ª–µ–Ω–∏–µ (Branch)',
      category: '–ü–æ—Ç–æ–∫',
      description: 'if/else –ª–æ–≥–∏–∫–∞',
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'condition', name: '–£—Å–ª–æ–≤–∏–µ', type: 'Boolean', required: true }
        ],
        outputs: [
          { id: 'exec_true', name: 'True', type: 'Exec' },
          { id: 'exec_false', name: 'False', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'flow:sequence',
      label: '‚õìÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      category: '–ü–æ—Ç–æ–∫',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏',
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true }
        ],
        outputs: [
          { id: 'exec_0', name: '0', type: 'Exec' },
          { id: 'exec_1', name: '1', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'action:send_message',
      label: 'üó£Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç',
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'chat_type', name: '–¢–∏–ø —á–∞—Ç–∞', type: 'String', required: true },
          { id: 'message', name: '–°–æ–æ–±—â–µ–Ω–∏–µ', type: 'String', required: true },
          { id: 'recipient', name: '–ê–¥—Ä–µ—Å–∞—Ç', type: 'String', required: false }
        ],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'action:send_log',
      label: 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–æ–Ω—Å–æ–ª—å –±–æ—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ',
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'message', name: '–°–æ–æ–±—â–µ–Ω–∏–µ', type: 'String', required: true }
        ],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'action:server_command',
      label: '‚öôÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–µ—Ä–≤–µ—Ä–∞',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞',
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'command', name: '–ö–æ–º–∞–Ω–¥–∞', type: 'String', required: true }
        ],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_user',
      label: 'üë§ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É',
      pins: {
        inputs: [
          { id: 'username', name: '–ù–∏–∫–Ω–µ–π–º', type: 'String', required: true }
        ],
        outputs: [
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
          { id: 'found', name: '–ù–∞–π–¥–µ–Ω', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:check_permission',
      label: '‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ –ø—Ä–∞–≤–æ',
      pins: {
        inputs: [
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true },
          { id: 'permission', name: '–ü—Ä–∞–≤–æ', type: 'String', required: true }
        ],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:concat_strings',
      label: 'üî§ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –¥–≤—É—Ö —Å—Ç—Ä–æ–∫',
      pins: {
        inputs: [
          { id: 'a', name: 'A', type: 'String', required: true },
          { id: 'b', name: 'B', type: 'String', required: true }
        ],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'String' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_user_field',
      label: 'üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ –∏–∑ User',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ User',
      pins: {
        inputs: [
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true }
        ],
        outputs: [
          { id: 'username', name: '–ù–∏–∫–Ω–µ–π–º', type: 'String' },
          { id: 'groups', name: '–ì—Ä—É–ø–ø—ã', type: 'Array' },
          { id: 'is_blacklisted', name: '–í –ß–°?', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_argument',
      label: 'üìù –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã',
      pins: {
        inputs: [
          { id: 'args', name: '–ê—Ä–≥—É–º–µ–Ω—Ç—ã', type: 'Object', required: true },
          { id: 'arg_name', name: '–ò–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞', type: 'String', required: true }
        ],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard' },
          { id: 'exists', name: '–°—É—â–µ—Å—Ç–≤—É–µ—Ç', type: 'Boolean' },
        ]
      }
    });

    this.registerNodeType({
      type: 'data:string_literal',
      label: 'üìù –¢–µ–∫—Å—Ç (String)',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É',
      pins: {
        inputs: [],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'String' }
        ]
      }
    });

    this.registerNodeType({
        type: 'event:current_user',
        label: 'üë§ –¢–µ–∫—É—â–∏–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        category: '–°–æ–±—ã—Ç–∏—è',
        description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É',
        pins: {
          inputs: [],
          outputs: [
              { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' }
          ]
        }
    });

    this.registerNodeType({
        type: 'string:contains',
        label: '–°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É',
        category: '–î–∞–Ω–Ω—ã–µ',
        description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ê —Å—Ç—Ä–æ–∫—É –ë',
        pins: {
          inputs: [
              { id: 'a', name: '–í—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–æ–∫–∞', type: 'String', required: true },
              { id: 'b', name: 'Include', type: 'String', required: true },
              { id: 'case_sensitive', name: '–£—á–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞', type: 'Boolean', required: false }
          ],
          outputs: [
              { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
          ]
        }
    });

    this.registerNodeType({
        type: 'string:matches',
        label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ Regex',
        category: '–î–∞–Ω–Ω—ã–µ',
        description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é',
        pins: {
          inputs: [
              { id: 'input', name: '–°—Ç—Ä–æ–∫–∞', type: 'String', required: true },
              { id: 'regex', name: 'Regex', type: 'String', required: true }
          ],
          outputs: [
              { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
          ]
        }
    });

    this.registerNodeType({
      type: 'variable:get',
      label: '–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
      category: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∞',
      pins: {
        inputs: [
          { id: 'name', name: '–ò–º—è', type: 'String', required: true }
        ],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard' }
        ]
      }
    });

    this.registerNodeType({
      type: 'variable:set',
      label: 'üñäÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
      category: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
      description: '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∞',
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'name', name: '–ò–º—è', type: 'String', required: true },
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard', required: true },
          { id: 'persist', name: '–•—Ä–∞–Ω–∏—Ç—å –≤ –ë–î?', type: 'Boolean', required: false }
        ],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'math:add',
      label: '–°–ª–æ–∂–µ–Ω–∏–µ / –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è',
      category: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      description: '–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–µ —Å—Ç—Ä–æ–∫–∏',
      pins: {
        inputs: [
          { id: 'a', name: 'A', type: 'Wildcard', required: true },
          { id: 'b', name: 'B', type: 'Wildcard', required: true }
        ],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Wildcard' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:cast',
      label: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∏–ø',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö',
      pins: {
        inputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard', required: true }
        ],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Wildcard' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_server_players',
      label: 'üë• –ò–≥—Ä–æ–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'players', name: '–ò–≥—Ä–æ–∫–∏', type: 'Array' }
        ]
      }
    });

    this.registerNodeType({
      type: 'array:get_random_element',
      label: 'üîÄ –°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
      category: '–ú–∞—Å—Å–∏–≤',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç.',
      pins: {
        inputs: [
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array', required: true }
        ],
        outputs: [
          { id: 'element', name: '–≠–ª–µ–º–µ–Ω—Ç', type: 'Wildcard' }
        ]
      }
    });

    this.registerNodeType({
      type: 'array:add_element',
      label: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç',
      category: '–ú–∞—Å—Å–∏–≤',
      description: '–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.',
      pins: {
        inputs: [
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array', required: true },
          { id: 'element', name: '–≠–ª–µ–º–µ–Ω—Ç', type: 'Wildcard', required: true }
        ],
        outputs: [
          { id: 'result', name: '–ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤', type: 'Array' }
        ]
      }
    });

    this.registerNodeType({
      type: 'array:remove_by_index',
      label: '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É',
      category: '–ú–∞—Å—Å–∏–≤',
      description: '–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.',
      pins: {
        inputs: [
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array', required: true },
          { id: 'index', name: '–ò–Ω–¥–µ–∫—Å', type: 'Number', required: true }
        ],
        outputs: [
          { id: 'result', name: '–ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤', type: 'Array' }
        ]
      }
    });

    this.registerNodeType({
      type: 'array:get_by_index',
      label: 'üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É',
      category: '–ú–∞—Å—Å–∏–≤',
      description: '–ü–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.',
      pins: {
        inputs: [
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array', required: true },
          { id: 'index', name: '–ò–Ω–¥–µ–∫—Å', type: 'Number', required: true }
        ],
        outputs: [
          { id: 'element', name: '–≠–ª–µ–º–µ–Ω—Ç', type: 'Wildcard' }
        ]
      }
    });

    this.registerNodeType({
      type: 'array:find_index',
      label: 'üîç –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞',
      category: '–ú–∞—Å—Å–∏–≤',
      description: '–ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
      pins: {
        inputs: [
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array', required: true },
          { id: 'element', name: '–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞', type: 'Wildcard', required: true }
        ],
        outputs: [
          { id: 'index', name: '–ò–Ω–¥–µ–∫—Å', type: 'Number' }
        ]
      }
    });

    this.registerNodeType({
      type: 'action:bot_look_at',
      label: 'üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ç–æ—á–∫—É/—Å—É—â–Ω–æ—Å—Ç—å',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–∑–≥–ª—è–¥ –±–æ—Ç–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ —Å—É—â–Ω–æ—Å—Ç–∏. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ.',
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
          { id: 'target', name: '–¶–µ–ª—å (–ü–æ–∑–∏—Ü–∏—è/–°—É—â–Ω–æ—Å—Ç—å)', type: 'Object', required: true },
          { id: 'add_y', name: '–ü—Ä–∏–±–∞–≤–∏—Ç—å –∫ Y', type: 'Number', required: false } // –ù–æ–≤—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –ø–∏–Ω
          // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        ],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_bot_look',
      label: 'üëÅÔ∏è –ü–æ–ª—É—á–∏—Ç—å –≤–∑–≥–ª—è–¥ –±–æ—Ç–∞',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (yaw) –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (pitch) —É–≥–æ–ª –≤–∑–≥–ª—è–¥–∞ –±–æ—Ç–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'yaw', name: 'Yaw', type: 'Number' },
          { id: 'pitch', name: 'Pitch', type: 'Number' },
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_entity_field',
      label: 'üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ –∏–∑ Entity',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å—É—â–Ω–æ—Å—Ç–∏.',
      pins: {
        inputs: [
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object', required: true }
        ],
        outputs: [
          { id: 'username', name: '–ù–∏–∫–Ω–µ–π–º', type: 'String' },
          { id: 'type', name: '–¢–∏–ø', type: 'String' },
          { id: 'position', name: '–ü–æ–∑–∏—Ü–∏—è', type: 'Object' },
          { id: 'isValid', name: '–í–∞–ª–∏–¥–Ω–∞', type: 'Boolean' },
        ]
      }
    });

    console.log(`NodeRegistry: Registered ${this.nodes.size} base nodes`);
  }
}

const nodeRegistryInstance = new NodeRegistry();
module.exports = nodeRegistryInstance;
