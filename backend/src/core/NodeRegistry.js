/**
 * @typedef {object} NodePin
 * @property {string} id - Unique pin identifier (e.g., "exec", "data_result").
 * @property {string} name - Human-readable pin name.
 * @property {string} type - Pin data type ("Exec", "String", "Boolean", etc.).
 * @property {boolean} [required] - Whether this pin is required.
 */

/**
 * @typedef {object} NodeConfig
 * @property {string} type - Unique node type identifier (e.g., "action:send_message").
 * @property {string} label - Human-readable node name.
 * @property {string} category - Category for UI grouping.
 * @property {string} description - Node description.
 * @property {NodePin[]} inputs - Array of input pin descriptions.
 * @property {NodePin[]} outputs - Array of output pin descriptions.
 * @property {Function} [executor] - Function to execute this node (for backend).
 */

/**
 * Registry for managing all available node types.
 */
class NodeRegistry {
  constructor() {
    this.nodes = new Map();
    this._registerBaseNodes();
  }

  /**
   * Registers a new node type.
   * @param {NodeConfig} nodeConfig - Node configuration.
   */
  registerNodeType(nodeConfig) {
    if (!nodeConfig.type) {
      throw new Error('Node type is required');
    }
    
    if (this.nodes.has(nodeConfig.type)) {
      console.warn(`Node type '${nodeConfig.type}' is already registered. Overriding.`);
    }

    this.nodes.set(nodeConfig.type, nodeConfig);
    console.log(`Registered node type: ${nodeConfig.type}`);
  }

  /**
   * Gets a node configuration by type.
   * @param {string} nodeType - Node type identifier.
   * @returns {NodeConfig|undefined}
   */
  getNodeConfig(nodeType) {
    return this.nodes.get(nodeType);
  }

  /**
   * Gets all registered node types.
   * @returns {NodeConfig[]}
   */
  getAllNodes() {
    return Array.from(this.nodes.values());
  }

  /**
   * Gets nodes grouped by category.
   * @returns {Object.<string, NodeConfig[]>}
   */
  getNodesByCategory() {
    const categories = {};
    for (const node of this.nodes.values()) {
      if (!categories[node.category]) {
        categories[node.category] = [];
      }
      categories[node.category].push(node);
    }
    return categories;
  }

  /**
   * Validates if a node type exists.
   * @param {string} nodeType - Node type identifier.
   * @returns {boolean}
   */
  hasNodeType(nodeType) {
    return this.nodes.has(nodeType);
  }

  /**
   * Registers the base node library.
   * @private
   */
  _registerBaseNodes() {
    this.registerNodeType({
      type: 'event:command',
      label: '‚ñ∂Ô∏è –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –≥—Ä–∞—Ñ–∞',
      inputs: [],
      outputs: [
        { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
        { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
        { id: 'args', name: '–ê—Ä–≥—É–º–µ–Ω—Ç—ã', type: 'Object' },
        { id: 'chat_type', name: '–¢–∏–ø —á–∞—Ç–∞', type: 'String' }
      ]
    });

    this.registerNodeType({
      type: 'flow:branch',
      label: '‚ÜîÔ∏è –í–µ—Ç–≤–ª–µ–Ω–∏–µ (Branch)',
      category: '–ü–æ—Ç–æ–∫',
      description: 'if/else –ª–æ–≥–∏–∫–∞',
      inputs: [
        { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
        { id: 'condition', name: '–£—Å–ª–æ–≤–∏–µ', type: 'Boolean', required: true }
      ],
      outputs: [
        { id: 'exec_true', name: 'True', type: 'Exec' },
        { id: 'exec_false', name: 'False', type: 'Exec' }
      ]
    });

    this.registerNodeType({
      type: 'flow:sequence',
      label: '‚õìÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      category: '–ü–æ—Ç–æ–∫',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏',
      inputs: [
        { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true }
      ],
      outputs: [
        { id: 'exec_0', name: '0', type: 'Exec' },
        { id: 'exec_1', name: '1', type: 'Exec' },
        { id: 'exec_2', name: '2', type: 'Exec' },
        { id: 'exec_3', name: '3', type: 'Exec' }
      ]
    });

    this.registerNodeType({
      type: 'action:send_message',
      label: 'üó£Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç',
      inputs: [
        { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
        { id: 'chat_type', name: '–¢–∏–ø —á–∞—Ç–∞', type: 'String', required: true },
        { id: 'message', name: '–°–æ–æ–±—â–µ–Ω–∏–µ', type: 'String', required: true },
        { id: 'recipient', name: '–ê–¥—Ä–µ—Å–∞—Ç', type: 'String', required: false }
      ],
      outputs: [
        { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
      ]
    });

    this.registerNodeType({
      type: 'action:server_command',
      label: '‚öôÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–µ—Ä–≤–µ—Ä–∞',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞',
      inputs: [
        { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
        { id: 'command', name: '–ö–æ–º–∞–Ω–¥–∞', type: 'String', required: true }
      ],
      outputs: [
        { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
      ]
    });

    this.registerNodeType({
      type: 'data:get_user',
      label: 'üë§ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É',
      inputs: [
        { id: 'username', name: '–ù–∏–∫–Ω–µ–π–º', type: 'String', required: true }
      ],
      outputs: [
        { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
        { id: 'found', name: '–ù–∞–π–¥–µ–Ω', type: 'Boolean' }
      ]
    });

    this.registerNodeType({
      type: 'data:check_permission',
      label: '‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ –ø—Ä–∞–≤–æ',
      inputs: [
        { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true },
        { id: 'permission', name: '–ü—Ä–∞–≤–æ', type: 'String', required: true }
      ],
      outputs: [
        { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
      ]
    });

    this.registerNodeType({
      type: 'data:concat_strings',
      label: 'üî§ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –¥–≤—É—Ö —Å—Ç—Ä–æ–∫',
      inputs: [
        { id: 'a', name: 'A', type: 'String', required: true },
        { id: 'b', name: 'B', type: 'String', required: true }
      ],
      outputs: [
        { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'String' }
      ]
    });

    this.registerNodeType({
      type: 'data:get_user_field',
      label: 'üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ –∏–∑ User',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ User',
      inputs: [
        { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true }
      ],
      outputs: [
        { id: 'username', name: '–ù–∏–∫–Ω–µ–π–º', type: 'String' },
        { id: 'groups', name: '–ì—Ä—É–ø–ø—ã', type: 'Array' },
        { id: 'is_blacklisted', name: '–í –ß–°?', type: 'Boolean' }
      ]
    });

    this.registerNodeType({
      type: 'data:get_argument',
      label: 'üìù –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã',
      inputs: [
        { id: 'args', name: '–ê—Ä–≥—É–º–µ–Ω—Ç—ã', type: 'Object', required: true },
        { id: 'arg_name', name: '–ò–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞', type: 'String', required: true }
      ],
      outputs: [
        { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard' },
        { id: 'exists', name: '–°—É—â–µ—Å—Ç–≤—É–µ—Ç', type: 'Boolean' },
      ]
    });

    this.registerNodeType({
      type: 'data:string_literal',
      label: 'üìù –¢–µ–∫—Å—Ç (String)',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É',
      inputs: [],
      outputs: [
        { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'String' }
      ]
    });



    this.registerNodeType({
        type: 'event:current_user',
        label: 'üë§ –¢–µ–∫—É—â–∏–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        category: '–°–æ–±—ã—Ç–∏—è',
        description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É',
        inputs: [],
        outputs: [
            { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' }
        ]
    });

    console.log(`NodeRegistry: Registered ${this.nodes.size} base nodes`);
  }
}

module.exports = NodeRegistry;
