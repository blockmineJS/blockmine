/**
 * @typedef {object} NodePin
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "exec", "data_result").
 * @property {string} name - –ß–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø–∏–Ω–∞.
 * @property {string} type - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–∏–Ω–∞ ("Exec", "String", "Boolean" –∏ —Ç.–¥.).
 * @property {boolean} [required] - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –ø–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º.
 */

/**
 * @typedef {object} NodeConfig
 * @property {string} type - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ —É–∑–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "action:send_message").
 * @property {string} label - –ß–∏—Ç–∞–µ–º–æ–µ –∏–º—è —É–∑–ª–∞.
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
 * @property {string} description - –û–ø–∏—Å–∞–Ω–∏–µ —É–∑–ª–∞.
 * @property {NodePin[]} inputs - –ú–∞—Å—Å–∏–≤ –æ–ø–∏—Å–∞–Ω–∏–π –≤—Ö–æ–¥–Ω—ã—Ö –ø–∏–Ω–æ–≤.
 * @property {NodePin[]} outputs - –ú–∞—Å—Å–∏–≤ –æ–ø–∏—Å–∞–Ω–∏–π –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∏–Ω–æ–≤.
 * @property {Function} [executor] - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —É–∑–ª–∞ (–Ω–∞ –±—ç–∫–µ–Ω–¥–µ).
 */

/**
 * –†–µ–µ—Å—Ç—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —É–∑–ª–æ–≤.
 */
class NodeRegistry {
  constructor() {
    this.nodes = new Map();
    this._registerBaseNodes();
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø —É–∑–ª–∞.
   * @param {NodeConfig} nodeConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∑–ª–∞.
   */
  registerNodeType(nodeConfig) {
    if (!nodeConfig.type) {
      throw new Error('Node type is required');
    }
    
    if (this.nodes.has(nodeConfig.type)) {
      console.warn(`Node type '${nodeConfig.type}' is already registered. Overriding.`);
    }

    this.nodes.set(nodeConfig.type, nodeConfig);
    console.log(`Registered node type: ${nodeConfig.type}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–∑–ª–∞ –ø–æ –µ–≥–æ —Ç–∏–ø—É.
   * @param {string} nodeType - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ —É–∑–ª–∞.
   * @returns {NodeConfig|undefined}
   */
  getNodeConfig(nodeType) {
    return this.nodes.get(nodeType);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —É–∑–ª–æ–≤.
   * @returns {NodeConfig[]}
   */
  getAllNodes() {
    return Array.from(this.nodes.values());
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–ª—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
   * @param {string} [graphType] - –¢–∏–ø –≥—Ä–∞—Ñ–∞ ('command' –∏–ª–∏ 'event') –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–∑–ª–æ–≤.
   * @returns {Object.<string, NodeConfig[]>} - –û–±—ä–µ–∫—Ç —Å —É–∑–ª–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
   */
  getNodesByCategory(graphType) {
    const result = {};
    for (const node of this.nodes.values()) {
      if (node.graphType === 'all' || node.graphType === graphType) {
        if (!result[node.category]) {
          result[node.category] = [];
        }
        result[node.category].push(node);
      }
    }
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–ø —É–∑–ª–∞.
   * @param {string} nodeType - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ —É–∑–ª–∞.
   * @returns {boolean}
   */
  hasNodeType(nodeType) {
    return this.nodes.has(nodeType);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É —É–∑–ª–æ–≤.
   * @private
   */
  _registerBaseNodes() {
    const all = 'all';
    const command = 'command';
    const event = 'event';

    // –°–æ–±—ã—Ç–∏—è
    this.registerNodeType({
      type: 'event:command',
      label: '‚ñ∂Ô∏è –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∞ –∫–æ–º–∞–Ω–¥—ã.',
      graphType: command,
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
          { id: 'args', name: '–ê—Ä–≥—É–º–µ–Ω—Ç—ã', type: 'Object' },
          { id: 'chat_type', name: '–¢–∏–ø —á–∞—Ç–∞', type: 'String' }
        ]
      }
    });

    this.registerNodeType({
        type: 'event:chat',
        name: '–°–æ–±—ã—Ç–∏–µ: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
        label: 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
        description: '–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤ —á–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        category: '–°–æ–±—ã—Ç–∏—è',
        graphType: event,
        isEvent: true,
        pins: {
            inputs: [],
            outputs: [
                { id: 'exec', type: 'Exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å' },
                { id: 'username', type: 'String', name: '–ò–≥—Ä–æ–∫' },
                { id: 'message', type: 'String', name: '–°–æ–æ–±—â–µ–Ω–∏–µ' },
                { id: 'chatType', type: 'String', name: '–¢–∏–ø —á–∞—Ç–∞' },
                { id: 'raw', type: 'String', name: 'Raw JSON' },
            ]
        }
    });

    this.registerNodeType({
      type: 'event:playerJoined',
      label: 'üëã –ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä.',
      graphType: event,
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
        ]
      }
    });

    this.registerNodeType({
      type: 'event:playerLeft',
      label: 'üö™ –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä.',
      graphType: event,
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' },
        ]
      }
    });

    this.registerNodeType({
      type: 'event:entitySpawn',
      label: 'üì¶ –°—É—â–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏–ª–∞—Å—å',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è –±–æ—Ç–∞.',
      graphType: event,
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object' }
        ]
      }
    });

    this.registerNodeType({
      type: 'event:entityMoved',
      label: 'üßç –°—É—â–Ω–æ—Å—Ç—å –ø–æ–¥–≤–∏–Ω—É–ª–∞—Å—å',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ª—é–±–∞—è —Å—É—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è.',
      graphType: event,
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object' }
        ]
      }
    });
    
    this.registerNodeType({
      type: 'event:entityGone',
      label: '‚ùå –°—É—â–Ω–æ—Å—Ç—å –∏—Å—á–µ–∑–ª–∞',
      category: '–°–æ–±—ã—Ç–∏—è',
      description: '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å—É—â–Ω–æ—Å—Ç—å –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–æ—Ç–∞.',
      graphType: event,
      pins: {
        inputs: [],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec' },
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object' }
        ]
      }
    });

    this.registerNodeType({
      type: 'flow:branch',
      label: '‚ÜîÔ∏è –í–µ—Ç–≤–ª–µ–Ω–∏–µ (Branch)',
      category: '–ü–æ—Ç–æ–∫',
      description: 'if/else –ª–æ–≥–∏–∫–∞',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'condition', name: '–£—Å–ª–æ–≤–∏–µ', type: 'Boolean', required: true }
        ],
        outputs: [
          { id: 'exec_true', name: 'True', type: 'Exec' },
          { id: 'exec_false', name: 'False', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'flow:sequence',
      label: '‚õìÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      category: '–ü–æ—Ç–æ–∫',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true }
        ],
        outputs: [
          { id: 'exec_0', name: '0', type: 'Exec' },
          { id: 'exec_1', name: '1', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'flow:for_each',
      label: 'üîÅ –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ (—Ü–∏–∫–ª)',
      category: '–ü–æ—Ç–æ–∫',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç "–¢–µ–ª–æ —Ü–∏–∫–ª–∞" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ "–ú–∞—Å—Å–∏–≤–µ".',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array', required: true }
        ],
        outputs: [
          { id: 'loop_body', name: '–¢–µ–ª–æ —Ü–∏–∫–ª–∞', type: 'Exec' },
          { id: 'element', name: '–≠–ª–µ–º–µ–Ω—Ç', type: 'Any' },
          { id: 'index', name: '–ò–Ω–¥–µ–∫—Å', type: 'Number' },
          { id: 'completed', name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'flow:break',
      label: 'üõë –í—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞',
      category: '–ü–æ—Ç–æ–∫',
      description: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ (For Each Loop) –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –µ–≥–æ –≤—ã—Ö–æ–¥ Completed.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true }
        ],
        outputs: []
      }
    });

    this.registerNodeType({
      type: 'action:send_message',
      label: 'üó£Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'chat_type', name: '–¢–∏–ø —á–∞—Ç–∞', type: 'String', required: true },
          { id: 'message', name: '–°–æ–æ–±—â–µ–Ω–∏–µ', type: 'String', required: true },
          { id: 'recipient', name: '–ê–¥—Ä–µ—Å–∞—Ç', type: 'String', required: false }
        ],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
        type: 'action:send_log',
        label: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥ (–≤–µ–±)',
        category: '–î–µ–π—Å—Ç–≤–∏—è',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—Ç–∞.',
        graphType: all,
        pins: {
            inputs: [
                { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
                { id: 'message', name: '–°–æ–æ–±—â–µ–Ω–∏–µ', type: 'String', required: true },
            ],
            outputs: [
                { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' },
            ]
        }
    });

    this.registerNodeType({
      type: 'action:bot_look_at',
      label: 'ü§ñ –ë–æ—Ç: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É –±–æ—Ç–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ —Å—É—â–Ω–æ—Å—Ç–∏.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
          { id: 'target', name: '–¶–µ–ª—å (–ü–æ–∑–∏—Ü–∏—è/–°—É—â–Ω–æ—Å—Ç—å)', type: 'Object', required: true },
          { id: 'add_y', name: '–ü—Ä–∏–±–∞–≤–∏—Ç—å –∫ Y', type: 'Number', required: false }
        ],
        outputs: [
          { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
        ]
      }
    });
    
    this.registerNodeType({
      type: 'action:bot_set_variable',
      label: 'üíæ –ó–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
      category: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥—Ä–∞—Ñ–∞.',
      graphType: all,
      pins: {
          inputs: [
              { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
              { id: 'name', name: '–ò–º—è', type: 'String', required: true },
              { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard', required: true },
              { id: 'persist', name: '–•—Ä–∞–Ω–∏—Ç—å –≤ –ë–î?', type: 'Boolean', required: false }
          ],
          outputs: [
              { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', type: 'Exec' }
          ]
      }
    });

    this.registerNodeType({
      type: 'data:get_argument',
      label: 'üì• –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.',
      graphType: command,
      data: {
        argumentName: {
          type: 'argument',
          label: '–ê—Ä–≥—É–º–µ–Ω—Ç'
        }
      },
      pins: {
        inputs: [],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Any' },
          { id: 'exists', name: '–°—É—â–µ—Å—Ç–≤—É–µ—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
        type: 'data:get_variable',
        label: 'üì§ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
        category: '–î–∞–Ω–Ω—ã–µ',
        description: '–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∞.',
        graphType: all,
        pins: {
            inputs: [],
            outputs: [
                { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard' }
            ]
        }
    });
    
    this.registerNodeType({
      type: 'data:get_entity_field',
      label: 'üì¶ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ —Å—É—â–Ω–æ—Å—Ç–∏',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "position.x", "username").',
      graphType: all,
      pins: {
        inputs: [
          { id: 'entity', name: '–°—É—â–Ω–æ—Å—Ç—å', type: 'Object', required: true },
        ],
        outputs: [
          { id: 'username', name: '–ù–∏–∫–Ω–µ–π–º', type: 'String' },
          { id: 'type', name: '–¢–∏–ø', type: 'String' },
          { id: 'position', name: '–ü–æ–∑–∏—Ü–∏—è', type: 'Object' },
          { id: 'isValid', name: '–í–∞–ª–∏–¥–Ω–∞', type: 'Boolean' },
        ]
      }
    });
    
    this.registerNodeType({
      type: 'data:string_literal',
      label: 'üìú –°—Ç—Ä–æ–∫–∞',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.',
      graphType: all,
      pins: {
        inputs: [],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'String' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:number_literal',
      label: 'üî¢ –ß–∏—Å–ª–æ',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Number', required: true }
        ],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Number' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:boolean_literal',
      label: '‚úîÔ∏è –ë—É–ª–µ–≤–æ',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ó–Ω–∞—á–µ–Ω–∏–µ –ò—Å—Ç–∏–Ω–∞/–õ–æ–∂—å.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Boolean', required: true }
        ],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:array_literal',
      label: 'üìã –ú–∞—Å—Å–∏–≤',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.',
      graphType: all,
      dynamicPins: true,
      pins: {
        inputs: [],
        outputs: [
          { id: 'value', name: '–ú–∞—Å—Å–∏–≤', type: 'Array' }
        ]
      }
    });
    
    this.registerNodeType({
      type: 'data:make_object',
      label: 'üèóÔ∏è –°–æ–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–°–æ–∑–¥–∞–µ—Ç JSON-–æ–±—ä–µ–∫—Ç –∏–∑ –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.',
      graphType: all,
      dynamicPins: true,
      pins: {
        inputs: [],
        outputs: [
          { id: 'value', name: '–û–±—ä–µ–∫—Ç', type: 'Object' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:cast',
      label: '‚ú® –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü—Ä–∏–≤–æ–¥–∏—Ç –≤—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ü–µ–ª–µ–≤–æ–º—É —Ç–∏–ø—É.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard', required: true }
        ],
        outputs: [
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:length',
      label: 'üìè –†–∞–∑–º–µ—Ä (–¥–ª–∏–Ω–∞)',
      category: '–î–∞–Ω–Ω—ã–µ',
      graphType: 'all',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –∏–ª–∏ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏.',
      pins: {
        inputs: [
          { id: 'data', name: '–ú–∞—Å—Å–∏–≤ –∏–ª–∏ –°—Ç—Ä–æ–∫–∞', type: 'Any', required: true }
        ],
        outputs: [
          { id: 'length', name: '–î–ª–∏–Ω–∞', type: 'Number' }
        ]
      }
    });

    this.registerNodeType({
      type: 'string:contains',
      label: 'üîç –°—Ç—Ä–æ–∫–∞: –°–æ–¥–µ—Ä–∂–∏—Ç',
      category: '–°—Ç—Ä–æ–∫–∏',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥—Ä—É–≥—É—é.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: 'Exec', type: 'Exec', required: true },
          { id: 'haystack', name: '–°—Ç—Ä–æ–∫–∞', type: 'String', required: true },
          { id: 'needle', name: '–ü–æ–¥—Å—Ç—Ä–æ–∫–∞', type: 'String', required: true },
          { id: 'case_sensitive', name: '–£—á–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞', type: 'Boolean', required: false }
        ],
        outputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' },
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'string:equals',
      label: '–°—Ç—Ä–æ–∫–∞: –†–∞–≤–Ω–æ',
      category: '–°—Ç—Ä–æ–∫–∏',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–≤–Ω—ã –ª–∏ —Å—Ç—Ä–æ–∫–∏ (—Å —É—á–µ—Ç–æ–º/–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: 'Exec', type: 'Exec', required: true },
          { id: 'a', name: 'A', type: 'String', required: true },
          { id: 'b', name: 'B', type: 'String', required: true },
          { id: 'case_sensitive', name: '–£—á–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞', type: 'Boolean', required: false }
        ],
        outputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' },
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'string:starts_with',
      label: '–°—Ç—Ä–æ–∫–∞: –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å',
      category: '–°—Ç—Ä–æ–∫–∏',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: 'Exec', type: 'Exec', required: true },
          { id: 'string', name: '–°—Ç—Ä–æ–∫–∞', type: 'String', required: true },
          { id: 'prefix', name: '–ü—Ä–µ—Ñ–∏–∫—Å', type: 'String', required: true },
          { id: 'case_sensitive', name: '–£—á–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞', type: 'Boolean', required: false }
        ],
        outputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' },
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'string:ends_with',
      label: '–°—Ç—Ä–æ–∫–∞: –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞',
      category: '–°—Ç—Ä–æ–∫–∏',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: 'Exec', type: 'Exec', required: true },
          { id: 'string', name: '–°—Ç—Ä–æ–∫–∞', type: 'String', required: true },
          { id: 'suffix', name: '–°—É—Ñ—Ñ–∏–∫—Å', type: 'String', required: true },
          { id: 'case_sensitive', name: '–£—á–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞', type: 'Boolean', required: false }
        ],
        outputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' },
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'string:length',
      label: '–°—Ç—Ä–æ–∫–∞: –î–ª–∏–Ω–∞',
      category: '–°—Ç—Ä–æ–∫–∏',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: 'Exec', type: 'Exec', required: true },
          { id: 'string', name: '–°—Ç—Ä–æ–∫–∞', type: 'String', required: true }
        ],
        outputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' },
          { id: 'length', name: '–î–ª–∏–Ω–∞', type: 'Number' }
        ]
      }
    });

    this.registerNodeType({
      type: 'string:split',
      label: '–°—Ç—Ä–æ–∫–∞: –†–∞–∑–¥–µ–ª–∏—Ç—å',
      category: '–°—Ç—Ä–æ–∫–∏',
      description: '–†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –ø–æ–¥—Å—Ç—Ä–æ–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: 'Exec', type: 'Exec', required: true },
          { id: 'string', name: '–°—Ç—Ä–æ–∫–∞', type: 'String', required: true },
          { id: 'separator', name: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å', type: 'String', required: true }
        ],
        outputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' },
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array' }
        ]
      }
    });

    this.registerNodeType({
      type: 'string:concat',
      label: '–°—Ç—Ä–æ–∫–∞: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å',
      category: '–°—Ç—Ä–æ–∫–∏',
      description: '–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–µ –∏–ª–∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É.',
      graphType: all,
      dynamicPins: true,
      pins: {
        inputs: [],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'String' }
        ]
      }
    });

    this.registerNodeType({
      type: 'math:operation',
      label: 'üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      category: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞–¥ –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'a', name: 'A', type: 'Number', required: true },
          { id: 'b', name: 'B', type: 'Number', required: true }
        ],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Number' }
        ]
      }
    });

    this.registerNodeType({
      type: 'logic:operation',
      label: 'üí° –õ–æ–≥–∏–∫–∞',
      category: '–õ–æ–≥–∏–∫–∞',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é. –î–ª—è –ù–ï (NOT) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥ –ê.',
      graphType: all,
      dynamicPins: true,
      pins: {
        inputs: [
          { id: 'a', name: 'A', type: 'Boolean', required: true },
          { id: 'b', name: 'B', type: 'Boolean', required: true }
        ],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'debug:log',
      label: 'üêû –û—Ç–ª–∞–¥–∫–∞ (–∫–æ–Ω—Å–æ–ª—å)',
      category: '–û—Ç–ª–∞–¥–∫–∞',
      description: '–í—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' },
          { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard', required: true }
        ],
        outputs: [
          { id: 'exec', name: 'Exec', type: 'Exec' }
        ]
      }
    });

    this.registerNodeType({
      type: 'math:random_number',
      label: 'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ',
      category: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      graphType: 'all',
      description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.',
      pins: {
        inputs: [
          { id: 'min', name: '–ú–∏–Ω', type: 'Number' },
          { id: 'max', name: '–ú–∞–∫—Å', type: 'Number' }
        ],
        outputs: [{ id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Number' }]
      }
    });

    this.registerNodeType({
      type: 'array:get_random_element',
      label: 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
      category: '–î–∞–Ω–Ω—ã–µ',
      graphType: 'all',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å.',
      pins: {
        inputs: [
          { id: 'array', name: '–ú–∞—Å—Å–∏–≤', type: 'Array', required: true }
        ],
        outputs: [
          { id: 'element', name: '–≠–ª–µ–º–µ–Ω—Ç', type: 'Any' },
          { id: 'index', name: '–ò–Ω–¥–µ–∫—Å', type: 'Number' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_server_players',
      label: 'üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤',
      category: '–î–∞–Ω–Ω—ã–µ',
      graphType: 'all',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
      pins: {
        inputs: [],
        outputs: [
          { id: 'players', name: '–ò–≥—Ä–æ–∫–∏', type: 'Array' }
        ]
      }
    });

    this.registerNodeType({
      type: 'logic:compare',
      label: '‚éó –°—Ä–∞–≤–Ω–µ–Ω–∏–µ',
      category: '–õ–æ–≥–∏–∫–∞',
      description: '–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'a', name: 'A', type: 'Wildcard' },
          { id: 'b', name: 'B', type: 'Wildcard' }
        ],
        outputs: [
          { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', type: 'Boolean' }
        ]
      }
    });

    this.registerNodeType({
      type: 'bot:get_position',
      label: 'ü§ñ –ü–æ–∑–∏—Ü–∏—è –±–æ—Ç–∞',
      category: '–ë–æ—Ç',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –±–æ—Ç–∞ –≤ –º–∏—Ä–µ.',
      graphType: all,
      pins: {
        inputs: [],
        outputs: [
          { id: 'position', name: '–ü–æ–∑–∏—Ü–∏—è', type: 'Object' }
        ]
      }
    });

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    this.registerNodeType({
        type: 'user:check_blacklist',
        label: '‚ùì –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ?',
        category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.',
        graphType: all,
        pins: {
            inputs: [
                { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true }
            ],
            outputs: [
                { id: 'is_blacklisted', name: '–í –ß–°', type: 'Boolean' }
            ]
        }
    });

    this.registerNodeType({
        type: 'user:set_blacklist',
        label: 'üö´ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ß–°',
        category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.',
        graphType: all,
        pins: {
            inputs: [
                { id: 'exec', name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', type: 'Exec', required: true },
                { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true },
                { id: 'blacklist_status', name: '–°—Ç–∞—Ç—É—Å –ß–°', type: 'Boolean', required: true }
            ],
            outputs: [
                { id: 'exec', name: '–î–∞–ª–µ–µ', type: 'Exec' },
                { id: 'updated_user', name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User' }
            ]
        }
    });
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    this.registerNodeType({
      type: 'variable:get',
      label: 'üì§ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
      category: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∞.',
      graphType: event,
      pins: {
          inputs: [],
          outputs: [
              { id: 'value', name: '–ó–Ω–∞—á–µ–Ω–∏–µ', type: 'Wildcard' }
          ]
      }
    });

    this.registerNodeType({
      type: 'user:get_groups',
      label: 'üë• –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã',
      category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true }
        ],
        outputs: [
          { id: 'groups', name: '–ì—Ä—É–ø–ø—ã', type: 'Array' }
        ]
      }
    });

    this.registerNodeType({
      type: 'user:get_permissions',
      label: 'üîë –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞',
      category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true }
        ],
        outputs: [
          { id: 'permissions', name: '–ü—Ä–∞–≤–∞', type: 'Array' }
        ]
      }
    });

    this.registerNodeType({
      type: 'data:get_user_field',
      label: 'üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      category: '–î–∞–Ω–Ω—ã–µ',
      description: '–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
      graphType: all,
      pins: {
        inputs: [
          { id: 'user', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: 'User', required: true }
        ],
        outputs: [
          { id: 'username', name: '–ù–∏–∫–Ω–µ–π–º', type: 'String' },
          { id: 'groups', name: '–ì—Ä—É–ø–ø—ã', type: 'Array' },
          { id: 'permissions', name: '–ü—Ä–∞–≤–∞', type: 'Array' },
          { id: 'isBlacklisted', name: '–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ', type: 'Boolean' },
        ]
      }
    });

    console.log(`NodeRegistry: Registered ${this.nodes.size} base nodes`);
  }

  getNodesByTypes(types) {
    return types.map(type => this.nodes.get(type)).filter(Boolean);
  }
}

const nodeRegistryInstance = new NodeRegistry();
module.exports = nodeRegistryInstance;
